- name: install ansible package requirement
  package:
    name: "postgresql-client-common, postgresql-client"
    state: present
- name: install ansible python requirement
  pip:
      #virtualenv: undefined # not required. An optional path to a I(virtualenv) directory to install into. It cannot be specified together with the 'executable' parameter (added in 2.1). If the virtualenv does not exist, it will be created before installing packages. The optional virtualenv_site_packages, virtualenv_command, and virtualenv_python options affect the creation of the virtualenv.
      #virtualenv_site_packages: no # not required. Whether the virtual environment will inherit packages from the global site-packages directory.  Note that if this setting is changed on an already existing virtual environment it will not have any effect, the environment must be deleted and newly created.
      #virtualenv_command: virtualenv # not required. The command or a pathname to the command to create the virtual environment with. For example C(pyvenv), C(virtualenv), C(virtualenv2), C(~/bin/virtualenv), C(/usr/local/bin/virtualenv).
      #chdir: undefined # not required. cd into this directory before running the command
      #requirements: undefined # not required. The path to a pip requirements file, which should be local to the remote system. File can be specified as a relative path if using the chdir option.
      name: psycopg2-binary # not required. The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.,This can be a list (since 2.2) and contain version specifiers (since 2.7).
      #virtualenv_python: undefined # not required. The Python executable used for creating the virtual environment. For example C(python3.5), C(python2.7). When not specified, the Python version used to run the ansible module is used. This parameter should not be used when C(virtualenv_command) is using C(pyvenv) or the C(-m venv) module.
      #editable: no # not required. Pass the editable flag.
      #umask: undefined # not required. The system umask to apply before installing the pip package. This is useful, for example, when installing on systems that have a very restrictive umask by default (e.g., 0077) and you want to pip install packages which are to be used by all users. Note that this requires you to specify desired umask mode in octal, with a leading 0 (e.g., 0077).
      executable: pip3 # not required. The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example C(pip-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation. It cannot be specified together with the 'virtualenv' parameter (added in 2.1). By default, it will take the appropriate version for the python interpreter use by ansible, e.g. pip3 on python 3, and pip2 or pip on python 2.
      #extra_args: undefined # not required. Extra arguments passed to pip.
      state: present # not required. choices: absent;forcereinstall;latest;present. The state of module,The 'forcereinstall' option is only available in Ansible 2.1 and above.
      #version: undefined # not required. The version number to install of the Python library specified in the I(name) parameter.
- name: create User
  postgresql_user:
      name: zabbix # required. Name of the user (role) to add or remove.
      #ssl_rootcert: undefined # not required. Specifies the name of a file containing SSL certificate authority (CA) certificate(s). If the file exists, the server's certificate will be verified to be signed by one of these authorities.
      #ssl_mode: disable # not required. choices: disable;allow;prefer;require;verify-ca;verify-full. Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.,See U(https://www.postgresql.org/docs/current/static/libpq-ssl.html) for more information on the modes.,Default of C(prefer) matches libpq default.
      login_user: postgres # not required. User (role) used to authenticate with PostgreSQL.
      login_host: "{{db_login_host}}" # not required. Host running PostgreSQL.
      #expires: undefined # not required. The date at which the user's password is to expire.,If set to C('infinity'), user's password never expire.,Note that this value should be a valid SQL date and time type.
      #db: undefined # not required. Name of database where permissions will be granted.
      #conn_limit: undefined # not required. Specifies the user connection limit.
      #login_unix_socket: undefined # not required. Path to a Unix domain socket for local connections.
      login_password: undefined # not required. Password used to authenticate with PostgreSQL.
      password: zabbix # not required. Set the user's password, before 1.4 this was required.,Password can be passed unhashed or hashed (MD5-hashed).,Unhashed password will automatically be hashed when saved into the database if C(encrypted) parameter is set, otherwise it will be save in plain text format.,When passing a hashed password it must be generated with the format C('str["md5"] + md5[ password + username ]'), resulting in a total of 35 characters. An easy way to do this is C(echo "md5$(echo -n 'verysecretpasswordJOE' | md5sum)").,Note that if the provided password string is already in MD5-hashed format, then it is used as-is, regardless of C(encrypted) parameter.
      port: 5432 # not required. Database port to connect to.
      #fail_on_user: yes # not required. If C(yes), fail when user can't be removed. Otherwise just log and continue.
      #priv: undefined # not required. PostgreSQL privileges string in the format: C(table:priv1,priv2).
      #no_password_changes: no # not required. If C(yes), don't inspect database for password changes. Effective when C(pg_authid) is not accessible (such as AWS RDS). Otherwise, make password changes as necessary.
      state: present # not required. choices: present;absent. The user (role) state.
      encrypted: yes # not required. Whether the password is stored hashed in the database. Passwords can be passed already hashed or unhashed, and postgresql ensures the stored password is hashed when C(encrypted) is set.,Note: Postgresql 10 and newer doesn't support unhashed passwords.,Previous to Ansible 2.6, this was C(no) by default.
      role_attr_flags: "CREATEDB,SUPERUSER" # not required. choices: [NO]SUPERUSER;[NO]CREATEROLE;[NO]CREATEDB;[NO]INHERIT;[NO]LOGIN;[NO]REPLICATION;[NO]BYPASSRLS. PostgreSQL role attributes string in the format: CREATEDB,CREATEROLE,SUPERUSER.,Note that '[NO]CREATEUSER' is deprecated.
- name: create database
  postgresql_db:
      name: zabbix # required. name of the database to add or remove
      #ssl_rootcert: undefined # not required. Specifies the name of a file containing SSL certificate authority (CA) certificate(s).,If the file exists, the server's certificate will be verified to be signed by one of these authorities.
      #ssl_mode: disable # not required. choices: disable;allow;prefer;require;verify-ca;verify-full. Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.,See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.,Default of C(prefer) matches libpq default.
      #login_unix_socket: undefined # not required. Path to a Unix domain socket for local connections
      #encoding: undefined # not required. Encoding of the database
      login_user: zabbix # not required. The username used to authenticate with
      #lc_collate: undefined # not required. Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless C(template0) is used as template.
      #target_opts: undefined # not required. Further arguments for pg_dump or pg_restore. Used when state is "dump" or "restore"
      #lc_ctype: undefined # not required. Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless C(template0) is used as template.
      port: 5432 # not required. Database port to connect to.
      owner: zabbix # not required. Name of the role to set as owner of the database
      state: present # not required. choices: present;absent;dump;restore. The database state. present implies that the database should be created if necessary.
  #absent implies that the database should be removed if present.
  #dump requires a target definition to which the database will be backed up.
  #(Added in 2.4) restore also requires a target definition from which the database will be restored.
  #(Added in 2.4) The format of the backup will be detected based on the target name.
  #Supported compression formats for dump and restore are: .bz2, .gz, and .xz
  #Supported formats for dump and restore are: .sql and .tar
  
 #     template: undefined # not required. Template used to create the database
      login_password: undefined # not required. The password used to authenticate with
      maintenance_db: postgres # not required. The value specifies the initial database (which is also called as maintenance DB) that Ansible connects to.
      login_host: "{{db_login_host}}" # not required. Host running the database
  register: createdb
- name: create tables
  postgresql_db:
      name: zabbix # required. name of the database to add or remove
      #ssl_rootcert: undefined # not required. Specifies the name of a file containing SSL certificate authority (CA) certificate(s).,If the file exists, the server's certificate will be verified to be signed by one of these authorities.
      #ssl_mode: disable # not required. choices: disable;allow;prefer;require;verify-ca;verify-full. Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.,See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.,Default of C(prefer) matches libpq default.
      #login_unix_socket: undefined # not required. Path to a Unix domain socket for local connections
      #encoding: undefined # not required. Encoding of the database
      login_user: zabbix # not required. The username used to authenticate with
      #lc_collate: undefined # not required. Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless C(template0) is used as template.
      #target_opts: undefined # not required. Further arguments for pg_dump or pg_restore. Used when state is "dump" or "restore"
      #lc_ctype: undefined # not required. Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless C(template0) is used as template.
      port: 5432 # not required. Database port to connect to.
      owner: zabbix # not required. Name of the role to set as owner of the database
      state: restore # not required. choices: present;absent;dump;restore. The database state. present implies that the database should be created if necessary.
  #absent implies that the database should be removed if present.
  #dump requires a target definition to which the database will be backed up.
  #(Added in 2.4) restore also requires a target definition from which the database will be restored.
  #(Added in 2.4) The format of the backup will be detected based on the target name.
  #Supported compression formats for dump and restore are: .bz2, .gz, and .xz
  #Supported formats for dump and restore are: .sql and .tar
  
 #     template: undefined # not required. Template used to create the database
      login_password: undefined # not required. The password used to authenticate with
      maintenance_db: postgres # not required. The value specifies the initial database (which is also called as maintenance DB) that Ansible connects to.
      login_host: "{{db_login_host}}" # not required. Host running the database
      target: "/usr/share/doc/zabbix-server-pgsql/create.sql.gz" # not required. File to back up or restore from. Used when state is "dump" or "restore"
  when: createdb.changed
- name: create tables
  postgresql_db:
      name: zabbix # required. name of the database to add or remove
      #ssl_rootcert: undefined # not required. Specifies the name of a file containing SSL certificate authority (CA) certificate(s).,If the file exists, the server's certificate will be verified to be signed by one of these authorities.
      #ssl_mode: disable # not required. choices: disable;allow;prefer;require;verify-ca;verify-full. Determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.,See https://www.postgresql.org/docs/current/static/libpq-ssl.html for more information on the modes.,Default of C(prefer) matches libpq default.
      #login_unix_socket: undefined # not required. Path to a Unix domain socket for local connections
      #encoding: undefined # not required. Encoding of the database
      login_user: zabbix # not required. The username used to authenticate with
      #lc_collate: undefined # not required. Collation order (LC_COLLATE) to use in the database. Must match collation order of template database unless C(template0) is used as template.
      #target_opts: undefined # not required. Further arguments for pg_dump or pg_restore. Used when state is "dump" or "restore"
      #lc_ctype: undefined # not required. Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...) Must match LC_CTYPE of template database unless C(template0) is used as template.
      port: 5432 # not required. Database port to connect to.
      owner: zabbix # not required. Name of the role to set as owner of the database
      state: restore # not required. choices: present;absent;dump;restore. The database state. present implies that the database should be created if necessary.
  #absent implies that the database should be removed if present.
  #dump requires a target definition to which the database will be backed up.
  #(Added in 2.4) restore also requires a target definition from which the database will be restored.
  #(Added in 2.4) The format of the backup will be detected based on the target name.
  #Supported compression formats for dump and restore are: .bz2, .gz, and .xz
  #Supported formats for dump and restore are: .sql and .tar
  
 #     template: undefined # not required. Template used to create the database
      login_password: undefined # not required. The password used to authenticate with
      maintenance_db: postgres # not required. The value specifies the initial database (which is also called as maintenance DB) that Ansible connects to.
      login_host: "{{db_login_host}}" # not required. Host running the database
      target: "/usr/share/doc/zabbix-server-pgsql/timescaledb.sql" # not required. File to back up or restore from. Used when state is "dump" or "restore"
  when: createdb.changed
- name: provide frontend config
  template:
    src: "templates/zabbix.conf.php.j2"
    dest: "/usr/share/zabbix/conf/zabbix.conf.php"
- name: provide server config| DBHost
  ini_file:
      section: 
      path: /etc/zabbix/zabbix_server.conf # required. Path to the INI-style file; this file is created if required.,Before 2.3 this option was only usable as I(dest).
      #seuser: undefined # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
      #group: undefined # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      option: DBHost # not required. If set (required for changing a I(value)), this is the name of the option.,May be omitted if adding/removing a whole I(section).
      #unsafe_writes: no # not required. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.,This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      #selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
      no_extra_spaces: yes # not required. Do not insert spaces before and after '=' symbol
      #serole: undefined # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      value: "{{db_login_host}}" # not required. The string value to be associated with an I(option). May be omitted when removing an I(option).
      #allow_no_value: false # not required. allow option without value and without '=' symbol
      state: present # not required. choices: absent;present. If set to C(absent) the option or section will be removed if present instead of created.
      #mode: undefined # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      #others: undefined # not required. All arguments accepted by the M(file) module also work here
      #owner: undefined # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      #attributes: undefined # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).,C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
      #backup: no # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      #create: yes # not required. If set to 'no', the module will fail if the file does not already exist. By default it will create the file if it is missing.
      #setype: undefined # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
- name: provide server config DBPort
  ini_file:
      section: 
      path: /etc/zabbix/zabbix_server.conf # required. Path to the INI-style file; this file is created if required.,Before 2.3 this option was only usable as I(dest).
      #seuser: undefined # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
      #group: undefined # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      option: DBPort # not required. If set (required for changing a I(value)), this is the name of the option.,May be omitted if adding/removing a whole I(section).
      #unsafe_writes: no # not required. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.,This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      #selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
      no_extra_spaces: yes # not required. Do not insert spaces before and after '=' symbol
      #serole: undefined # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      value: "{{dbport}}" # not required. The string value to be associated with an I(option). May be omitted when removing an I(option).
      #allow_no_value: false # not required. allow option without value and without '=' symbol
      state: present # not required. choices: absent;present. If set to C(absent) the option or section will be removed if present instead of created.
      #mode: undefined # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      #others: undefined # not required. All arguments accepted by the M(file) module also work here
      #owner: undefined # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      #attributes: undefined # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).,C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
      #backup: no # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      #create: yes # not required. If set to 'no', the module will fail if the file does not already exist. By default it will create the file if it is missing.
      #setype: undefined # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
- name: restart zabbix server
  service:
    name: zabbix-server
    state: restarted