---
# tasks file for zabbix-package
- name: add key
  apt_key:
      keyserver: "keyserver.ubuntu.com" # not required. The keyserver to retrieve key from.
      #url: undefined # not required. The URL to retrieve key from.
      #data: undefined # not required. The keyfile contents to add to the keyring.
      #keyring: undefined # not required. The full path to specific keyring file in /etc/apt/trusted.gpg.d/
      state: present # not required. choices: absent;present. Ensures that the key is present (added) or absent (revoked).
      #file: undefined # not required. The path to a keyfile on the remote server to add to the keyring.
      validate_certs: yes # not required. If C(no), SSL certificates for the target url will not be validated. This should only be used on personally controlled sites using self-signed certificates.
      id: "082AB56BA14FE591" # not required. The identifier of the key.,Including this allows check mode to correctly report the changed state.,If specifying a subkey's id be aware that apt-key does not understand how to remove keys via a subkey id.  Specify the primary key's id instead.,This parameter is required when C(state) is set to C(absent).
#    url: "https://repo.zabbix.com/zabbix/4.4/ubuntu/dists/{{ansible_distribution_release}}/Release.gpg"
#    state: "present"
- name: add repository
  apt_repository:
      repo: "deb https://repo.zabbix.com/zabbix/{{zabbix_package_version}}/ubuntu/ {{ansible_distribution_release}} main" # required. A source string for the repository.
      state: present # not required. choices: absent;present. A source string state.
      update_cache: yes # not required. Run the equivalent of C(apt-get update) when a change occurs.  Cache updates are run after making changes.
      #mode: 0644 # not required. The octal mode for newly created files in sources.list.d
      #codename: undefined # not required. Override the distribution codename to use for PPA repositories. Should usually only be set when working with a PPA on a non-Ubuntu target (e.g. Debian or Mint)
      #validate_certs: yes # not required. If C(no), SSL certificates for the target repo will not be validated. This should only be used on personally controlled sites using self-signed certificates.
      #filename: undefined # not required. Sets the name of the source list file in sources.list.d. Defaults to a file name based on the repository source url. The .list extension will be automatically added.
- name: Install Packages
  package:
      state: present # required. Whether to install (C(present)), or remove (C(absent)) a package. Other states depend on the underlying package module, i.e C(latest).
      name: "{{item}}" # required. Package name, or package specifier with version, like C(name-1.0).,Be aware that packages are not always named the same and this module will not 'translate' them per distro.
      #use: auto # not required. The required package manager module to use (yum, apt, etc). The default 'auto' will use existing facts or try to autodetect it.,You should only use this field if the automatic selection is not working for some reason.
  with_items:
    - "php{{php_version}}-{{zabbix_backend_db}}"
    - "php{{php_version}}-fpm"
    - "zabbix-server-{{zabbix_backend_db}}"
    - "zabbix-frontend-php"
    - "zabbix-agent"
    - "zabbix-nginx-conf"
- name: set listen
  ini_file:
      section: "www"
      path: "/etc/php/{{php_version}}/fpm/pool.d/www.conf" # required. Path to the INI-style file; this file is created if required.,Before 2.3 this option was only usable as I(dest).
      #seuser: undefined # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
      #group: undefined # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      option: "listen"  # not required. If set (required for changing a I(value)), this is the name of the option.,May be omitted if adding/removing a whole I(section).
      #unsafe_writes: no # not required. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.,This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      #selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
      #no_extra_spaces: no # not required. Do not insert spaces before and after '=' symbol
      #serole: undefined # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      value: "{{fpm_listen}}" # not required. The string value to be associated with an I(option). May be omitted when removing an I(option).
      #allow_no_value: false # not required. allow option without value and without '=' symbol
      state: present # not required. choices: absent;present. If set to C(absent) the option or section will be removed if present instead of created.
      #mode: undefined # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      #others: undefined # not required. All arguments accepted by the M(file) module also work here
      #owner: undefined # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      #attributes: undefined # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).,C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
      #backup: no # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      #create: yes # not required. If set to 'no', the module will fail if the file does not already exist. By default it will create the file if it is missing.
      #setype: undefined # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
- name: set timezone
  ini_file:
      section: global
      path: "/etc/php/{{php_version}}/fpm/php-fpm.conf" # required. Path to the INI-style file; this file is created if required.,Before 2.3 this option was only usable as I(dest).
      #seuser: undefined # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
      #group: undefined # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      option: "php_value[date.timezone]"  # not required. If set (required for changing a I(value)), this is the name of the option.,May be omitted if adding/removing a whole I(section).
      #unsafe_writes: no # not required. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.,This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      #selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
      #no_extra_spaces: no # not required. Do not insert spaces before and after '=' symbol
      #serole: undefined # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      value: "{{fpm_timezone}}" # not required. The string value to be associated with an I(option). May be omitted when removing an I(option).
      #allow_no_value: false # not required. allow option without value and without '=' symbol
      state: present # not required. choices: absent;present. If set to C(absent) the option or section will be removed if present instead of created.
      #mode: undefined # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      #others: undefined # not required. All arguments accepted by the M(file) module also work here
      #owner: undefined # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      #attributes: undefined # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).,C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
      #backup: no # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
      #create: yes # not required. If set to 'no', the module will fail if the file does not already exist. By default it will create the file if it is missing.
      #setype: undefined # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
- name: restart fpm
  service:
    name: "php{{php_version}}-fpm"
    state: restarted
- name: unlink default nginx
  file:
      path: /etc/nginx/sites-enabled/default # required. Path to the file being managed.
      #src: undefined # not required. path of the file to link to (applies only to C(state=link) and C(state=hard)). Will accept absolute, relative and nonexisting paths. Relative paths are relative to the file being created (C(path)) which is how the UNIX command C(ln -s SRC DEST) treats relative paths.
      #selevel: s0 # not required. Level part of the SELinux file context. This is the MLS/MCS attribute, sometimes known as the C(range). C(_default) feature works as for I(seuser).
      #force: no # not required. force the creation of the symlinks in two cases: the source file does not exist (but will appear later); the destination exists and is a file (so, we need to unlink the "path" file and create symlink to the "src" file in place of it).
      #unsafe_writes: no # not required. By default this module uses atomic operations to prevent data corruption or inconsistent reads from the target files, but sometimes systems are configured or just broken in ways that prevent this. One example is docker mounted files, which cannot be updated atomically from inside the container and can only be written in an unsafe manner.,This option allows Ansible to fall back to unsafe methods of updating files when atomic operations fail (however, it doesn't force Ansible to perform unsafe writes). IMPORTANT! Unsafe writes are subject to race conditions and can lead to data corruption.
      #access_time: undefined # not required. This parameter indicates the time the file's access time should be set to,Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now),Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)
      #seuser: undefined # not required. User part of SELinux file context. Will default to system policy, if applicable. If set to C(_default), it will use the C(user) portion of the policy if available.
      #recurse: no # not required. recursively set the specified file attributes (applies only to directories)
      #serole: undefined # not required. Role part of SELinux file context, C(_default) feature works as for I(seuser).
      #access_time_format: %Y%m%d%H%M.%S # not required. When used with C(access_time), indicates the time format that must be used.,Based on default Python format (see time.strftime doc)
      #group: undefined # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
      #modification_time: undefined # not required. This parameter indicates the time the file's modification time should be set to,Should be C(preserve) when no modification is required, C(YYYYMMDDHHMM.SS) when using default time format, or C(now),Default is None meaning that C(preserve) is the default for C(state=[file,directory,link,hard]) and C(now) is default for C(state=touch)
      state: absent # not required. choices: absent;directory;file;hard;link;touch. If C(directory), all intermediate subdirectories will be created if they do not exist. Since Ansible 1.7 they will be created with the supplied permissions. If C(file), the file will NOT be created if it does not exist; see the C(touch) value or the M(copy) or M(template) module if you want that behavior.  If C(link), the symbolic link will be created or changed. Use C(hard) for hardlinks. If C(absent), directories will be recursively deleted, and files or symlinks will be unlinked. Note that C(absent) will not cause C(file) to fail if the C(path) does not exist as the state did not change. If C(touch) (new in 1.4), an empty file will be created if the C(path) does not exist, while an existing file or directory will receive updated file access and modification times (similar to the way `touch` works from the command line).
      #mode: undefined # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
      #modification_time_format: %Y%m%d%H%M.%S # not required. When used with C(modification_time), indicates the time format that must be used.,Based on default Python format (see time.strftime doc)
      #owner: undefined # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
      #follow: yes # not required. This flag indicates that filesystem links, if they exist, should be followed.,Previous to Ansible 2.5, this was C(no) by default.
      #attributes: undefined # not required. Attributes the file or directory should have. To get supported flags look at the man page for I(chattr) on the target system. This string should contain the attributes in the same order as the one displayed by I(lsattr).,C(=) operator is assumed as default, otherwise C(+) or C(-) operators need to be included in the string.
      #setype: undefined # not required. Type part of SELinux file context, C(_default) feature works as for I(seuser).
- name: link zabbix config
  file:
    src: "/etc/zabbix/nginx.conf"
    dest: "/etc/nginx/sites-enabled/default"
    state: link
- name: restart nginx
  service:
    name: nginx
    state: restarted
- include_tasks: "{{zabbix_backend_db}}.yml"