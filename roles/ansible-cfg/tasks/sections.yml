---
- name: Extract ansible_cfg_entry KVPs
  set_fact: 
    ansible_cfg_entry_KVPs: "{{ansible_cfg_entries[(ansible_cfg_section)]}}"
- name: "Set Options"
  set_fact:
    options: "{{ansible_cfg_entry_KVPs | dict2items }}" #| dictsort | dict2items
- name: "Apply cfg changes"
  ini_file:
        section: "{{ansible_cfg_section}}" # required. Section name in INI file. This is added if C(state=present) automatically when a single value is being set.,If left empty or set to `null`, the I(option) will be placed before the first I(section). Using `null` is also required if the config format does not support sections.
        path: "{{ansible_config_file}}" # required. Path to the INI-style file; this file is created if required.,Before 2.3 this option was only usable as I(dest).
        #group: "{{odoo.shell_group}}" # not required. Name of the group that should own the file/directory, as would be fed to I(chown).
        #owner: "{{odoo_environment_name}}" # not required. Name of the user that should own the file/directory, as would be fed to I(chown).
        option: "{{optionvar.key}}" # not required. If set (required for changing a I(value)), this is the name of the option.,May be omitted if adding/removing a whole I(section).
        value: "{{optionvar.value}}" # not required. The string value to be associated with an I(option). May be omitted when removing an I(option).
        state: present # not required. choices: absent;present. If set to C(absent) the option or section will be removed if present instead of created.
        #mode: 0644 # not required. Mode the file or directory should be. For those used to I(/usr/bin/chmod) remember that modes are actually octal numbers. You must either add a leading zero so that Ansible's YAML parser knows it is an octal number (like C(0644) or C(01777)) or quote it (like C('644') or C('1777')) so Ansible receives a string and can do its own conversion from string into number.  Giving Ansible a number without following one of these rules will end up with a decimal number which will have unexpected results. As of version 1.8, the mode may be specified as a symbolic mode (for example, C(u+rwx) or C(u=rw,g=r,o=r)).
        #backup: yes # not required. Create a backup file including the timestamp information so you can get the original file back if you somehow clobbered it incorrectly.
        create: yes # not required. If set to 'no', the module will fail if the file does not already exist. By default it will create the file if it is missing.
  loop: "{{ options }}"
  loop_control:
    loop_var: optionvar