---
- name: "Ensure Repo is present"
  apt_repository:
    repo: "ppa:ansible/ansible"
    state: present
    update_cache: yes
  ignore_errors: yes
    #validate_certs: yes
#- name: Update apt-get
#  become: true
#  apt:
#    update_cache: true
#  tags:
#    - Install
- name: "install docker requirements"
  package:
    name: "{{item}}"
  with_items:
    #- ansible #should be installed via pip3 to ensure behaviour
    - docker 
    - docker.io 
    - git 
    - python3-pip
    #- python-pip
- name: "pip install docker"
  pip:
    name: "{{item}}" # not required. The name of a Python library to install or the url(bzr+,hg+,git+,svn+) of the remote package.,This can be a list (since 2.2) and contain version specifiers (since 2.7).  
    executable: pip3 # not required. The explicit executable or a pathname to the executable to be used to run pip for a specific version of Python installed in the system. For example C(pip-3.3), if there are both Python 2.7 and 3.3 installations in the system and you want to run pip for the Python 3.3 installation. It cannot be specified together with the 'virtualenv' parameter (added in 2.1). By default, it will take the appropriate version for the python interpreter use by ansible, e.g. pip3 on python 3, and pip2 or pip on python 2.
    #extra_args: undefined # not required. Extra arguments passed to pip.
    state: present # not required. choices: absent;forcereinstall;latest;present. The state of module,The 'forcereinstall' option is only available in Ansible 2.1 and above.
    #version: undefined # not required. The version number to install of the Python library specified in the I(name) parameter.
  with_items:
    - docker
    - docker-compose
#- name: "Pip Install docker-py"
#  pip:
#    name: "docker-py"
- name: Restart Docker Service
  service:
    name: "docker"
    enabled: yes
    state: started
- name: "create install folder"
  file:
    path: "~/awx-install/"
    state: directory
- name: "git clone stuff"
  git:
    repo: "{{item.repo}}"
    dest: "~/awx-install/{{item.name}}"
    version: "{{item.version}}"
    force: yes
  with_items:
    - repo: "{{awx_repo}}/awx.git"
      version: "{{awx_version}}"
      name: "awx"
    - repo: "{{awx_repo}}/awx-logos.git"
      version: "master"
      name: "awx-logos"
  ignore_errors: yes
- name: "Provide AWX Inventory"
  template: 
    src: templates/awx_inventory.ini.j2
    dest: "~/awx-install/awx/installer/inventory"
- name: "ensure backup directory exists"
  file:
    path: /backup
    state: directory
aws --endpoint-url http://192.168.178.17:9000 s3 cp /backup/{{awx_pg_database}}_db.dump s3://backups/awx/
- name: "create backup of docker database to /backup"
  cron:
      #cron_file: undefined # not required. If specified, uses this file instead of an individual user's crontab. If this is a relative path, it is interpreted with respect to /etc/cron.d. (If it is absolute, it will typically be /etc/crontab). Many linux distros expect (and some require) the filename portion to consist solely of upper- and lower-case letters, digits, underscores, and hyphens. To use the C(cron_file) parameter you must specify the C(user) as well.
      month: * # not required. Month of the year the job should run ( 1-12, *, */2, etc )
      #disabled: no # not required. If the job should be disabled (commented out) in the crontab.,Only has effect if C(state=present).
      job: "docker exec -u postgres awx_postgres pg_dump -U{{awx_pg_username}}  -Fc -d {{awx_pg_database}} > /backup/{{awx_pg_database}}_db.dump" # not required. The command to execute or, if env is set, the value of environment variable. The command should not contain line breaks. Required if state=present.
      #special_time: reboot # not required. choices: reboot;yearly;annually;monthly;weekly;daily;hourly. Special time specification nickname.
      user: root # not required. The specific user whose crontab should be modified.
      #insertafter: undefined # not required. Used with C(state=present) and C(env). If specified, the environment variable will be inserted after the declaration of specified environment variable.
      #insertbefore: undefined # not required. Used with C(state=present) and C(env). If specified, the environment variable will be inserted before the declaration of specified environment variable.
      day: * # not required. Day of the month the job should run ( 1-31, *, */2, etc )
      minute: 0 # not required. Minute when the job should run ( 0-59, *, */2, etc )
      name: undefined # not required. Description of a crontab entry or, if env is set, the name of environment variable. Required if state=absent. Note that if name is not set and state=present, then a new crontab entry will always be created, regardless of existing ones.
      hour: 1 # not required. Hour when the job should run ( 0-23, *, */2, etc )
      #reboot: no # not required. If the job should be run at reboot. This option is deprecated. Users should use special_time.
      state: present # not required. choices: absent;present. Whether to ensure the job or environment variable is present or absent.
      #weekday: * # not required. Day of the week that the job should run ( 0-6 for Sunday-Saturday, *, etc )
      #env: no # not required. If set, manages a crontab's environment variable. New variables are added on top of crontab. "name" and "value" parameters are the name and the value of environment variable.
      #backup: no # not required. If set, create a backup of the crontab before it is modified. The location of the backup is returned in the C(backup_file) variable by this module.
    #pip uninstall docker-py
    #pip install docker
    #pip install docker-compose
    #apt-get install python3-pip
    #python -m pip uninstall docker-py
    #python -m pip uninstall docker
    #python -m pip install docker
    #docker ps -q | xargs -n 1 docker inspect --format '{{.HostConfig.RestartPolicy.Name}} {{ .NetworkSettings.IPAddress }} {{ .Name }}' | sed 's/ \// /'