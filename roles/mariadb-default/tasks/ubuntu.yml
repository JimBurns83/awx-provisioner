---
- name: Install MariaDB
  apt:
    pkg: "mariadb-server"
    state: present
#- name: update mysql root password for all root accounts
#  become: yes
#  mysql_user: 
#    name: root 
#    host: localhost 
#    login_user: root
#    login_password: "{{mariadb_root_pass}}"
#    check_implicit_admin: yes # not required. Check if mysql allows login as root/nopassword before trying supplied credentials.
#    password: "{{ mariadb_root_pass }}"
  #mysql_user:
  #    name: undefined # required. name of the user (role) to add or remove
  #    login_port: 3306 # not required. Port of the MySQL server. Requires I(login_host) be defined as other then localhost if login_port is used.
  #    update_password: always # not required. choices: always;on_create. C(always) will update passwords if they differ.  C(on_create) will only set the password for newly created users.
  #    ssl_cert: undefined # not required. The path to a client public key certificate.
  #    config_file: ~/.my.cnf # not required. Specify a config file from which user and password are to be read.
  #    ssl_key: undefined # not required. The path to the client private key.
   #   encrypted: no # not required. Indicate that the 'password' field is a `mysql_native_password` hash
   ##   login_host: localhost # not required. Host running the database.
   #   append_privs: no # not required. Append the privileges defined by priv to the existing ones for this user instead of overwriting existing ones.
   #   sql_log_bin: yes # not required. Whether binary logging should be enabled or disabled for the connection.
   #   host_all: no # not required. override the host option, making ansible apply changes to all hostnames for a given user.  This option cannot be used when creating users
    ##  ssl_ca: undefined # not required. The path to a Certificate Authority (CA) certificate. This option, if used, must specify the same certificate as used by the server.
    #  login_password: undefined # not required. The password used to authenticate with.
    #  login_unix_socket: undefined # not required. The path to a Unix domain socket for local connections.
    #  state: present # not required. choices: present;absent. Whether the user should exist.  When C(absent), removes the user.
    #  login_user: undefined # not required. The username used to authenticate with.
    #  host: localhost # not required. the 'host' part of the MySQL username
     ## 
     # password: undefined # not required. set the user's password.
     # connect_timeout: 30 # not required. The connection timeout when connecting to the MySQL server.
     # priv: undefined # not required. MySQL privileges string in the format: C(db.table:priv1,priv2).,Multiple privileges can be specified by separating each one using a forward slash: C(db.table:priv/db.table:priv).,The format is based on MySQL C(GRANT) statement.,Database and table names can be quoted, MySQL-style.,If column privileges are used, the C(priv1,priv2) part must be exactly as returned by a C(SHOW GRANT) statement. If not followed, the module will always report changes. It includes grouping columns by permission (C(SELECT(col1,col2)) instead of C(SELECT(col1),SELECT(col2))).
# - name: copy .my.cnf file with root password credentials
#      template: src=templates/root/.my.cnf dest=/root/.my.cnf owner=root mode=0600
#- name: update mysql root password for all root accounts
#      mysql_user: name=root host={{ item }} password={{ root_db_password }}
#      with_items:
#        - {{ ansible_hostname }}
#        - 127.0.0.1
#        - ::1
- name: ensure anonymous users are not in the database
  mysql_user: 
    name: '' 
    host: "{{ item }}" 
    login_user: niceroot
    login_password: "{{mariadb_root_pass}}"
    state: absent
  with_items:
  - localhost
  - "{{ inventory_hostname }}"
- name: remove the test database
  mysql_db: 
    name: test 
    state: absent
    login_user: niceroot
    login_password: "{{mariadb_root_pass}}"